using System.Collections.Generic;
using System.IO;
using System.Linq;
using NodaTime;
using NodaTime.Extensions;

namespace SQLServerTimeConversion {

    class Program {
        static IEnumerable<NodaTime.DateTimeZone> timeZones = DateTimeZoneProviders.Tzdb.GetAllZones();
        static Instant fromInstant = Instant.FromUtc(2015, 1, 1, 0, 0);
        static Instant toInstant = Instant.FromUtc(2025, 12, 1, 0, 0);

        static int maxTimezoneIdSize = timeZones.Select(r => r.Id.Length).Max();

        static void Main(string[] args) {
            var outputFile = System.IO.File.CreateText(@"..\..\..\Example.sql");

            outputFile.WriteLine("SET ANSI_NULLS ON");
            outputFile.WriteLine("GO");
            outputFile.WriteLine("SET QUOTED_IDENTIFIER ON");
            outputFile.WriteLine("GO");

            Generate_funcLocaltoUTC(outputFile);
            Generate_funcUTCtoLocal(outputFile);
            outputFile.Flush();
            outputFile.Close();
        }

        public static void Generate_funcLocaltoUTC(StreamWriter outStream) {
            outStream.WriteLine("IF object_id(N'[dbo].[funcLocaltoUTC]', N'FN') IS NOT NULL");
            outStream.WriteLine("  DROP FUNCTION[dbo].[funcLocaltoUTC]");
            outStream.WriteLine("GO");
            outStream.WriteLine();
            outStream.WriteLine("CREATE FUNCTION [dbo].[funcLocaltoUTC] (@Local datetime, @tzoID varchar({0}))", maxTimezoneIdSize);
            outStream.WriteLine("RETURNS datetime AS");
            outStream.WriteLine("BEGIN");
            outStream.WriteLine("");
            outStream.WriteLine("  -- GENERATED BY https://github.com/elliveny/SQLServerTimeConversion");
            outStream.WriteLine("");
            outStream.WriteLine("  declare @UTC datetime");
            outStream.WriteLine("  declare @offsetMins int");
            outStream.WriteLine("  SET @offsetMins = CASE");
            foreach (var tz in timeZones) {
                outStream.Write("    WHEN @tzoID='{0}' THEN", tz.Id);
                var intervals = tz.GetZoneIntervals(fromInstant, toInstant);
                var intervalsWithEnd = intervals.Where(t => t.HasEnd).OrderByDescending(t => t.IsoLocalEnd);
                if (intervalsWithEnd.Count() > 0) {
                    outStream.WriteLine("");
                    outStream.WriteLine("      CASE");
                    foreach (var y in intervalsWithEnd) {
                        outStream.WriteLine("        WHEN @Local>='{0:dd-MMM-yyyy HH:mm:ss}' THEN {1}", y.IsoLocalStart, y.WallOffset.ToTimeSpan().TotalMinutes);
                    }
                    outStream.WriteLine("        ELSE {0}", intervals.First().WallOffset.ToTimeSpan().TotalMinutes);
                    outStream.WriteLine("      END");
                } else {
                    outStream.WriteLine(" {0}", intervals.First().WallOffset.ToTimeSpan().TotalMinutes);
                }
            }
            outStream.WriteLine("    ELSE");
            outStream.WriteLine("      0");
            outStream.WriteLine("  END");
            outStream.WriteLine("  SET @UTC=dateadd(minute,-@offsetMins,@Local)");
            outStream.WriteLine("  RETURN @UTC");
            outStream.WriteLine("END");
            outStream.WriteLine("GO");
            outStream.WriteLine();
        }

        public static void Generate_funcUTCtoLocal(StreamWriter outStream) {
            outStream.WriteLine("IF object_id(N'[dbo].[funcUTCtoLocal]', N'FN') IS NOT NULL");
            outStream.WriteLine("  DROP FUNCTION[dbo].[funcUTCtoLocal]");
            outStream.WriteLine("GO");
            outStream.WriteLine();
            outStream.WriteLine("CREATE FUNCTION [dbo].[funcUTCtoLocal] (@UTC datetime, @tzoID varchar({0}))", maxTimezoneIdSize);
            outStream.WriteLine("RETURNS datetime AS");
            outStream.WriteLine("BEGIN");
            outStream.WriteLine("");
            outStream.WriteLine("  -- GENERATED BY https://github.com/elliveny/SQLServerTimeConversion");
            outStream.WriteLine("");
            outStream.WriteLine("  declare @Local datetime");
            outStream.WriteLine("  declare @offsetMins int");
            outStream.WriteLine("  SET @offsetMins = CASE");
            foreach (var tz in timeZones) {
                outStream.Write("    WHEN @tzoID='{0}' THEN", tz.Id);
                var intervals = tz.GetZoneIntervals(fromInstant, toInstant);
                var intervalsWithEnd = intervals.Where(t => t.HasEnd).OrderByDescending(t => t.IsoLocalEnd);
                if (intervalsWithEnd.Count() > 0) {
                    outStream.WriteLine("");
                    outStream.WriteLine("      CASE");
                    foreach (var y in intervalsWithEnd) {
                        outStream.WriteLine("        WHEN @UTC>='{0:dd-MMM-yyyy HH:mm:ss}' THEN {1}", y.Start, y.WallOffset.ToTimeSpan().TotalMinutes);
                    }
                    outStream.WriteLine("        ELSE {0}", intervals.First().WallOffset.ToTimeSpan().TotalMinutes);
                    outStream.WriteLine("      END");
                } else {
                    outStream.WriteLine(" {0}", intervals.First().WallOffset.ToTimeSpan().TotalMinutes);
                }
            }
            outStream.WriteLine("    ELSE");
            outStream.WriteLine("      0");
            outStream.WriteLine("  END");
            outStream.WriteLine("  SET @Local = dateadd(minute, @offsetMins, @UTC)");
            outStream.WriteLine("  RETURN @Local");
            outStream.WriteLine("END");
            outStream.WriteLine("GO");
            outStream.WriteLine();
        }
    }
}